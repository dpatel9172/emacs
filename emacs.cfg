
; 16.04.93 [.emacs] used for SUN OS (M.M. Gutzmann)
; 16.04.94 not modified for SUN SOLARIS (M.M. Gutzmann)
; 23.04.94 auctex-functions added 
;
; this is the startup (initial load) file for emacs
					;


; (line-number-mode 0) ; show line-number in modeline
; (let ((entry (member '(line-number-mode "L%l--") mode-line-format)))
;   (setcar entry (cons '(line-number-mode "L%l/%c--") (cdr entry)))
;   (line-number-mode 1))

(setq load-path (append (list nil "~/emacs/")  load-path))

(require 'bs)


(require 'xcscope)

	(define-key global-map [(control f3)]  'cscope-set-initial-directory)
	(define-key global-map [(control f4)]  'cscope-unset-initial-directory)
	(define-key global-map [(control f5)]  'cscope-find-this-symbol)
	(define-key global-map [(control f6)]  'cscope-find-global-definition)
	(define-key global-map [(control f7)]  'cscope-find-global-definition-no-prompting)
        (define-key global-map [(control f8)]  'cscope-pop-mark)
	(define-key global-map [(control f9)]  'cscope-next-symbol)
	(define-key global-map [(control f10)] 'cscope-next-file)
	(define-key global-map [(control f11)] 'cscope-prev-symbol)
	(define-key global-map [(control f12)] 'cscope-prev-file)
        (define-key global-map [(meta f9)]  'cscope-display-buffer)
        (define-key global-map [(meta f10)] 'cscope-display-buffer-toggle)

(setq scroll-step 4)				; at the end of a window scoll 4 lines
(setq next-line-add-newlines nil)		; do not insert new lines at cursor-down

; do no auto-saving or backup'ing :
(setq backup-inhibited t)
(setq make-backup-files nil)
(auto-save-mode 0)
(setq auto-save-inteval 0)
(setq auto-save-timeout 0)
(setq auto-save-default nil)
(setq auto-save-list-file-name nil)

(setq query-replace-highlight t)
(setq resize-minibuffer-mode t)
(setq TeX-save-query nil)			; vor LateX-Aufruf File speichern
(setq mail-archive-file-name ".mrec")
;(setq gnus-nntp-server "epix")
(setq lpr-switches '("-h"))
(setq fill-column 94)
(setq-default fill-column 94)
(setq visible-bell t)
(setq-default visible-bell t)
(setq text-mode-hook 'turn-on-auto-fill)
(setq-default  auto-fill-hook  'do-auto-fill)
(setq mail-self-blind t)
;; (setq display-time-day-and-date t)

(setq default-major-mode 'text-mode)		; Default mode for unknown files
(setq transient-mark-mode t)			; the region visible
;(delete-selection-mode t)			; replaces selection
(setq make-backup-files nil)			; backup files
(setq search-highlight t)

(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'eval-expression 'backup-inhibit 1)
(auto-fill-mode)
(display-time)
(setq display-time-24hr-format t)		; show time in 24 h mode
(setq frame-title-format "%b")



(fset 'uncomment-this-line "^A^D^D^E^?^?^N^A")
(fset 'comment-this-line   "^A/*^E*/^N^A")

(global-set-key [C-right]  'forward-word)
(global-set-key [C-left]   'backward-word)
(global-set-key [C-up]     'previous-line)
(global-set-key [C-down]   'next-line)
(global-set-key [C-prior]  'beginning-of-buffer)
(global-set-key [C-next]   'end-of-buffer)
(global-set-key [f16]      'copy-region-as-kill)	; Kopieren
(global-set-key [?\A-w]    'copy-region-as-kill)	; Kopieren
(global-set-key [f18]      'yank)			; Einsetzen
(global-set-key [f20]      'kill-region)		; Ausschneiden
(global-set-key [SunF36]   'desktop-save)		; F11

(global-set-key "\t" 'indent-relative)
(global-set-key "\C-c\C-c" 'compile)
(global-set-key "\C-x\C-m" 'manual-entry)
(global-set-key "\C-g" 'goto-line)
(global-set-key "\M-q" 'keyboard-quit)


(global-unset-key "\C-[[")
(global-set-key "\C-[*" "\C-a/* \C-u89  */
")
(global-set-key "\C-[-" "\C-a/* \C-u89- */
")
 
(global-set-key [mouse-1]         'mouse-set-point)
(global-set-key [down-mouse-1]    'mouse-drag-region)
(global-set-key [drag-mouse-1]    'mouse-save-then-kill)
(global-set-key [double-mouse-1]  'mouse-set-point)
(global-set-key [triple-mouse-1]  'mouse-set-point)
(global-set-key [mouse-2]         'mouse-yank-at-click)
(global-set-key [double-mouse-2]  'mouse-yank-at-click)
(global-set-key [double-mouse-3]  'mouse-yank-at-click)
(global-set-key [mouse-3]         'mouse-save-then-kill)
(global-set-key [double-mouse-3]  'mouse-kill)
(global-set-key [triple-mouse-3]  'mouse-kill)

(global-set-key [help]   'help-for-help)
;(global-unset-key [f1])
;(global-unset-key "\C-h")
(global-set-key [f1]     'command-apropos)
(global-set-key [f2]     'point-to-register)
(global-set-key [f3]     'jump-to-register)
(global-set-key [f5]     'hide-ifdef-block)
(global-set-key [f6]     'show-ifdef-block)
(global-set-key [f7]     'c-forward-conditional)
(global-set-key [f8]     'c-backward-conditional)
(global-set-key [f9]     'c-up-conditional)
;(global-set-key [f10]    'server-save)
(global-unset-key [f10])
(global-set-key [find]   'beginning-of-line)
(global-set-key [select] 'end-of-line)
(global-set-key [remove] 'delete-char)
(global-set-key [delete] 'delete-char)
(global-set-key [home]   'beginning-of-line)
(global-set-key [next]   'scroll-up)
(global-set-key [prior]  'scroll-down)
(global-set-key [end]    'end-of-line)

;; prepare for ISO charset
;; (standard-display-european 1)
(set-input-mode (car (current-input-mode)) (nth 1 (current-input-mode)) 0)
(require 'iso-insert)

;(global-set-key "\M-[" 'insert-a-umlaut)
;(define-key esc-map "o" 'insert-o-umlaut)
;(define-key esc-map "O" 'insert-O-umlaut)
;(define-key esc-map "a" 'insert-a-umlaut)
;(define-key esc-map "A" 'insert-A-umlaut)
;(define-key esc-map "u" 'insert-u-umlaut)
;(define-key esc-map "U" 'insert-U-umlaut)
;(define-key esc-map "z" 'insert-ss)



;;;
;;; remap Backspace and Delete
;;;

;(global-unset-key [backspace])
;(global-set-key   [backspace] 'delete-backward-char)

(define-key emacs-lisp-mode-map       [delete] 'delete-char)
(define-key lisp-mode-map             [delete] 'delete-char)
(define-key lisp-interaction-mode-map [delete] 'delete-char)
(define-key text-mode-map             [delete] 'delete-char)
(define-key minibuffer-local-map      [delete] 'delete-char)
(define-key minibuffer-local-completion-map [delete]  'delete-char)
;(define-key tex-mode-map              [delete] 'delete-char)



;; Lade das Packet 'hilit19' zum Einfärben (C/C++/LaTeX usw.)

;; Here's a good font menu:
;;
; (setq
;  x-fixed-font-alist
;  '("Font Menu"
;    ("Misc"
;     ("6x12" "-misc-fixed-medium-r-semicondensed--12-110-75-75-c-60-*-1")
;     ("6x13" "-misc-fixed-medium-r-semicondensed--13-120-75-75-c-60-*-1")
;     ("lucida 13"
;      "-b&amp;h-lucidatypewriter-medium-r-normal-sans-0-0-0-0-m-0-*-1")
;     ("7x13" "-misc-fixed-medium-r-normal--13-120-75-75-c-70-*-1")
;     ("7x14" "-misc-fixed-medium-r-normal--14-130-75-75-c-70-*-1")
;     ("9x15" "-misc-fixed-medium-r-normal--15-140-*-*-c-*-*-1")
;     ("")
;     ("clean 8x8" "-schumacher-clean-medium-r-normal--*-80-*-*-c-*-*-1")
;     ("clean 8x14" "-schumacher-clean-medium-r-normal--*-140-*-*-c-*-*-1")
;     ("clean 8x10" "-schumacher-clean-medium-r-normal--*-100-*-*-c-*-*-1")
;     ("clean 8x16" "-schumacher-clean-medium-r-normal--*-160-*-*-c-*-*-1")
;     ("")
;     ("sony 8x16" "-sony-fixed-medium-r-normal--16-120-100-100-c-80-*-1")
;     ("")
;     ("-- Courier --")
;     ("Courier 10" "-adobe-courier-medium-r-normal--*-100-*-*-m-*-*-1")
;     ("Courier 12" "-adobe-courier-medium-r-normal--*-120-*-*-m-*-*-1")
;     ("Courier 14" "-adobe-courier-medium-r-normal--*-140-*-*-m-*-*-1")
;     ("Courier 18" "-adobe-courier-medium-r-normal--*-180-*-*-m-*-*-1")
;     ("Courier 18-b" "-adobe-courier-bold-r-normal--*-180-*-*-m-*-*-1")
;     )))




;; Load color-mode (C/C++/LaTeX)
;; 
;(make-variable-buffer-local 'hilit-auto-rehighlight)
;(cond (window-system
;      (setq   hilit-mode-enable-list  '(not text-mode)
;              hilit-background-mode   'light
;              hilit-inhibit-hooks     nil
;              hilit-inhibit-rebinding nil
;              hilit-wysiwyg-replace t
;              hilit-face-check nil
;              hilit-auto-highlight-maxout 200000
;              hilit-auto-rehighlight-fallback '(80000 . 2000)
;             hilit-auto-rehighlight t
;              hilit-auto-rehighlight 'visible
;              hilit-quietly t)
;              (require 'hilit19)
;      ))


(load "desktop")
(desktop-load-default)
(desktop-read)

;; set colors for font-lock-mode:
(set-face-foreground 'modeline "Gold")
(set-face-background 'modeline "Navy")
(set-face-background 'region "cyan")
(set-face-foreground 'bold "Dark Slate Grey")
; (set-face-foreground 'bold-italic "color")
; (set-face-foreground 'default "color")
; (set-face-foreground 'highlight "color")
; (set-face-foreground 'italic "color")
; (set-face-foreground 'modeline "color")
; (set-face-foreground 'region "color")
; (set-face-foreground 'secondary-selection "color")
; (set-face-foreground 'underline "color")

; (set-face-foreground 'font-lock-function-name "color")
; (set-face-foreground 'font-lock-reference-face "color")
; (set-face-foreground 'font-lock-type-face "color")
;(set-face-foreground 'font-lock-comment-face "sienna")
;(set-face-foreground 'font-lock-keyword-face "VioletRed")
;(set-face-foreground 'font-lock-string-face "plum")

(defun del-word-left ()
  "Lösche das Wort links vom Cursor."
  (interactive)
  (backward-word 1)
  (kill-word 1))

(defun del-word-right ()
  "Lösche das Wort rechts vom Cursor."
  (interactive)
  (kill-word 1))

(global-set-key [C-backspace] 'del-word-left)
(global-set-key [A-C-backspace] 'del-word-right)

(global-set-key [A-tab] 'next-multiframe-window)
(global-set-key [C-tab] 'tab-to-tab-stop)tab-width
(global-set-key [C-return] 'eval-last-sexp)
(global-set-key [M-up] 'bs-cycle-next)
(global-set-key [M-down] 'bs-cycle-previous)

(global-set-key (quote [f10]) (quote kill-emacs)) ;pressing f10 exits emacs like nc
;;(global-set-key "\C-u" 'undo)
(global-set-key [?\A-d] 'kill-line)
(global-set-key "\M-d" 'kill-line)
(global-set-key [?\A-q] 'kill-this-buffer)

;(set-face-font 'italic "-adobe-courier-medium-o-normal--*-*-100-100-*-*-*-1")
;(set-face-font 'bold-italic "-adobe-courier-bold-o-normal--*-*-100-100-*-*-*-1")

;(hilit-lookup-face-create 'Goldenrod)
;(set-face-foreground 'Goldenrod "hot pink")

(add-hook 'LaTeX-mode-hook 'turn-on-font-lock)
(add-hook 'tex-mode-hook 'turn-on-font-lock)
;(add-hook 'TeX-mode-hook 'turn-on-font-lock)
;(add-hook 'text-mode-hook 'turn-on-font-lock)
;(add-hook 'dired-mode-hook 'turn-on-font-lock)
;(add-hook 'emacs-lisp-mode-hook 'turn-on-font-lock)
;(add-hook 'c++-mode-hook 'turn-on-font-lock)
;(add-hook 'c-mode-hook 'turn-on-font-lock)
;(add-hook 'lisp-mode-hook 'turn-on-font-lock)
;(add-hook 'find-file-hooks 'turn-on-font-lock)


(setq font-lock-maximum-decoration t
      font-lock-maximum-size nil)
(font-lock-mode 1)

;(setq mail-default-headers "Return-Receipt-To:\n")
(setq mail-default-headers
;      (concat "Return-Receipt-To: " user-mail-address ".inf.uni-jena.de \n"))
      (concat "Return-Receipt-To: " "mrz.informatik.uni-jena.de \n"))
(setq mail-self-bind nil)                     ;; nicht mehr BCC preusche automat.

(setq frame-title-format "%b")
(define-key key-translation-map [f1] nil)
(setq help-event-list (delq 'f1 help-event-list))
 (global-set-key "\C-xg" 'goto-line)



(fset 'eref
   [?d ?e ?b ?u ?g ?  ?m ?i ?c ?r ?o return ?d ?e ?b ?u ?g ?  ?m ?e ?m  return ?d ?e ?b ?u ?g ?  ?p ?r ?e ?d return ?d ?a ?t ?a ?p ?a ?t ?h ?o ?n return ?d ?u ?m ?p ?_ ?q ?i ?n ?s ?t ?o ?n return ?d ?u ?m ?p ?_ ?i ?n ?s ?t ?o ?n return ?d ?e ?b ?u ?g ?  ?e ?r ?e ?f return])

(fset 'erefc
   [?\C-  C-home ?\C-w return ?m ?a ?k ?e return ?e ?r ?e ?f return ?d ?u ?m ?p ?_ ?i ?n ?s ?t ?o ?n return ?d ?u ?m ?p ?_ ?q ?i ?n ?s ?t ?o ?n return ?d ?e ?b ?u ?g ?  ?p ?r ?e ?d return ?d ?e ?b ?u ?g ?  ?e ?r ?e ?f return ?d ?a ?t ?a ?p ?a ?t ?h ?o ?n return ?s])

(fset 'eref-last-command
   [C-up return])
(global-set-key [f12]      'eref-last-command)	
;; (load "column-simple")

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(c-macro-prompt-flag t)
 '(case-fold-search t)
 '(current-language-environment "English")
 '(global-font-lock-mode t nil (font-lock))
 '(inhibit-startup-screen t)
 '(transient-mark-mode t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(which-func ((((class color) (min-colors 88) (background light)) nil))))
